### This is an Over-Write of Vanilla 
### Section 1 : Safegaurd Scripts for King/Regent dying with holdings fix
### Section 2 : Wealth Inheritance
### Section 3 : Vanilla Effects

on_character_death = {
	effect = {

	###Section 1.0 : Safegaurd Script for Commander King Dying 
	### When succession is fixed completely, this simplifies the whole thing. 
		if = { 
			limit = {
				is_co_ruler = yes
				employer = { 
					OR = {
						government = regency_despotic_monarchy
						government = regency_aristocratic_monarchy
						government = regency_stratocratic_monarchy
						government = regency_theocratic_monarchy
						government = regency_plutocratic_monarchy
						government = regency_imperium
						government = regency_imperial_cult
						government = regency_dictatorship
					}
				}
			}
			
			save_scope_as = the_true_king
			
			employer = {
				set_variable = {
					name = money_for_the_king
					value = {
						value = root.wealth
						multiply = 0.5
					}
				}
			}
			
			employer = {
				random_character = { 
					limit = {
						is_primary_heir = yes
					}
					save_scope_as = the_heir
				}
				
				if = {
					limit = {
						exists = scope:the_heir
						scope:the_heir = {
							has_same_family = scope:the_true_king
						}
					}
					scope:the_heir = {
						add_gold = {
							value = employer.var:money_for_the_king
						}
						
					}
					scope:the_true_king = {
						if = {
							limit = {
								exists = scope:the_heir
								num_holdings_owned > 0
							}
							while = {
								limit = {
									num_holdings_owned > 0
								}
								random_holdings = {
								save_scope_as = holding_transfer
								}	
								remove_holding = scope:holding_transfer
								scope:the_heir = {
									add_holding = scope:holding_transfer
								}
							}
						}
					}
						
					set_as_ruler = scope:the_heir
					###VARIABLE ISNT REMOVED QUICK ENOUGH TO PAY THE ORDINARY PRICE
					add_stability = -10

				}

				if = {
					limit = {
						government = regency_despotic_monarchy
					}
					change_government = despotic_monarchy
					
				}
				else_if = {
					limit = {
						government = regency_aristocratic_monarchy
					}
					change_government = aristocratic_monarchy
					
				}
				else_if = {
					limit = {
						government = regency_stratocratic_monarchy
					}
					change_government = stratocratic_monarchy
					
				}
				else_if = {
					limit = {
						government = regency_theocratic_monarchy
					}
					change_government = theocratic_monarchy
					
				}
				else_if = {
					limit = {
						government = regency_plutocratic_monarchy
					}
					change_government = plutocratic_monarchy
					
				}
				else_if = {
					limit = {
						government = regency_imperium
					}
					change_government = imperium
					
				}
				else_if = {
					limit = {
						government = regency_imperial_cult
					}
					change_government = imperial_cult
					
				}
				else_if = {
					limit = {
						government = regency_dictatorship
					}
					change_government = dictatorship
					
				}	
				scope:the_true_king = {
					remove_character_modifier = commander_king
				}
				
				calculate_succession_effect = yes
				##In case game doesn't make him head of family
				trigger_event = {
					id = family_member_events.1
				}
			}
		}
		
	### Section 1.1 : Safegaurd Script for Regent Dying
	
		if = { 
			limit = {
				is_ruler = yes
				employer = { 
					OR = {
						government = regency_despotic_monarchy
						government = regency_aristocratic_monarchy
						government = regency_stratocratic_monarchy
						government = regency_theocratic_monarchy
						government = regency_plutocratic_monarchy
						government = regency_imperium
						government = regency_imperial_cult
						government = regency_dictatorship
					}
				}
				
			}
			
			save_scope_as = former_regent
			
			employer = {
				random_character = {
					limit = {
						is_head_of_family = yes
						is_co_ruler = no
					}
					
					save_scope_as = new_regent
				}
				
				set_as_ruler = scope:new_regent
				trigger_event = { id = regency_events.3 }
			}
		}
	
		###Section 1.2 : If an Heir recalculate succession
		
		if = {
			limit = {
				OR = {
					has_character_modifier = primary_heir_succession_value
					has_character_modifier = pretender_succession_value_1
					has_character_modifier = pretender_succession_value_2
					has_character_modifier = pretender_succession_value_3
					has_character_modifier = contender_succession_value
				}
			}
			employer = {
				calculate_succession_effect = yes
			}
		}
		
		### Section 2: Wealth Inheritance
		
		## NEED TO FIX.
		
		if = { # Monarchy only - Ruler passes wealth to heir if they are related
			limit = {
				is_ruler = yes
				employer = {
					OR = {
						government = despotic_monarchy
						government = aristocratic_monarchy
						government = stratocratic_monarchy
						government = theocratic_monarchy
						government = plutocratic_monarchy
						government = imperium
						government = imperial_cult
						government = dictatorship
					}
					exists = primary_heir
					exists = primary_heir.family
					primary_heir.family = ROOT.family
				}
			}
			employer.primary_heir = {
				save_scope_as = holding_target
				add_gold = family_inheritance_svalue
			}
		}

		else_if = { # Head of Family passes wealth on
			limit = {
				is_head_of_family = yes
				exists = next_in_family
				NAND = {
					is_co_ruler = yes
					employer = {
						NOT = { has_variable = regency_government }
					}
				}
			}
			next_in_family = {
				save_scope_as = holding_target
				add_gold = family_inheritance_svalue
			}
		}
		else_if = { # Family member passes wealth to Head of Family
			limit = {
				is_head_of_family = no
				exists = family.head_of_family
				family.head_of_family = { employer = ROOT.employer }
			}
			family.head_of_family = {
				save_scope_as = holding_target
				add_gold = family_individual_inheritance_svalue
			}
		}
		add_gold = { # Clear deceased's bank accounts
			value = 0
			subtract = wealth
		}
		# Holding Inheritance
		if = { 
			limit = { num_holdings_owned > 0 }
			if = { # Give holdings to relevant character based on above
				limit = { 
					exists = scope:holding_target 
					NOT = {
						scope:holding_target = root
					}
				}
				while = {
					limit = { num_holdings_owned > 0 }
					random_holdings = { save_scope_as = holding_transfer }
					remove_holding = scope:holding_transfer
					scope:holding_target = { add_holding = scope:holding_transfer }
				}
				scope:holding_target = {
					trigger_event = {
						id = holding_mech.1
						days = 1 #Necessary
					}
				}
			}
		}

	
	###Section 3 : Vanilla Effects not inheritance
	
		clear_ambition_effect = yes
		befriend_removal_effect = yes
		clear_befriending_var_effect = yes
		if = {
			limit = {
				has_variable = on_espionage_mission_origin
				var:on_espionage_mission_origin = {
					exists = this
					has_land = yes
				}
				has_variable = on_espionage_mission_recipient
				var:on_espionage_mission_recipient = {
					exists = this
					has_land = yes
				}
			}
			save_scope_as = spy
			var:on_espionage_mission_recipient = {
				save_scope_as = spied_upon
			}
			var:on_espionage_mission_origin = {
				save_scope_as = esp_o
			}
			scope:esp_o = {
				trigger_event = {
					id = country_diplomacy.46
				}
			}
		}
		remove_espionage_variables_effect = yes
		if = {
			limit = {
				has_triggered_character_modifier = disloyal_family_head_cmod
				is_general = yes
			}
			every_character_unit = {
				destroy_unit = yes
			}
		}
		if = { # Pyrrhus dies abroard
			limit = {
				this = char:70
				is_ruler = no
				age <= 22
				NOT = { employer = c:EPI }
				c:EPI = { has_land = yes }
			}
			c:EPI = {
				trigger_event = { id = dhe_dde_pyrrhus.10 }
			}
		}
		if = { # Pyrrhus - Memorable Life
			limit = {
				this = char:70
				is_ruler = yes
				employer = { 
					has_land = yes
					has_variable = pyrrhus_returns_flag
				}
			}
			employer = {
				trigger_event = { id = dhe_dde_pyrrhus.35 }
				me_epi_2_saved_variables_clearer_complete = yes
				me_epi_3_saved_variables_clearer_complete = yes
			}
		}

		# Succession Crisis
		if = {
			limit = {
				is_ruler = yes
				employer = {
					is_monarchy = yes
					has_land = yes
				}
			}
			save_scope_as = former_ruler
			employer = {
				if = {
					limit = {
						NOR = {
							has_variable = recent_succession_crisis
							has_civil_war = yes
						}
						any_successor = {
							loyalty < 33
							is_adult = yes
							is_ruler = no
							is_pretender = yes
							is_primary_heir = no
							NOT = {
								has_character_modifier = disloyal_successor_cmod
							}
						}
					}
					every_successor = {
						limit = {
							loyalty < 33
							is_adult = yes
							is_ruler = no
							is_pretender = yes
							is_primary_heir = no
							NOT = {
								has_character_modifier = disloyal_successor_cmod
							}
						}
						if = {
							limit = {
								NOT = {
									exists = scope:successor_general_1
								}
							}
							save_scope_as = successor_general_1
						}
						else_if = {
							limit = { 
								NOT = {
									exists = scope:successor_general_2
								}
							}
							save_scope_as = successor_general_2
						}
						else_if = {
							limit = {
								NOT = {
									exists = scope:successor_general_3
								}
							}
							save_scope_as = successor_general_3
						}
						else_if = {
							limit = {
								NOT = {
									exists = scope:successor_general_4
								}
							}
							save_scope_as = successor_general_4
						}
					}
					trigger_event = {
						id = succession_crisis.1
					}
				}
			}
		}
		if = {
			limit = {
				has_variable = adventuring_from
				NOT = {
					employer = var:adventuring_from
				}
				var:adventuring_from = {
					has_land = yes
				}
			}
			if = {
				limit = {
					has_variable = next_in_succession
				}
				set_local_variable = next_in_succession
			}
			location = {
				save_scope_as = death_location
			}
			save_scope_as = dead_merc
			var:adventuring_from = {
				trigger_event = {
					id = character_events.48
				}
			}
		}
		if = {
			limit = {
				has_variable = ip_mon_47_regent_consort
				employer = {
					has_land = yes
					current_ruler = {
						is_child_of = root
					}
				}
			}
			remove_variable = ip_mon_47_regent_consort
			save_scope_as = ip_mon_47_consort
			if = {
				limit = {
					NAND = {
						this = char:287
						employer.current_ruler = char:289
					}
				}
				employer = {
					trigger_event = { id = ip_monarchy.52 }
				}
			}
			else = {
				employer.current_ruler = { 
					remove_variable = ip_mon_47_regent_child
					remove_regent_modifier_effect = yes
				}
			}
		}
		if = {
			limit = {
				has_variable = ip_mon_47_regent_child
			}
			remove_variable = ip_mon_47_regent_child
			if = {
				limit = {
					remove_regent_modifier_trigger = yes
				}
				remove_regent_modifier_effect = yes
			}
			employer = {
				trigger_event = {
					id = ip_monarchy.49
				}
			}
		}
		if = {
			limit = { has_variable = me_syr_democracy_leader }
			remove_variable = me_syr_democracy_leader
			clear_saved_scope = democracy_leader
			save_scope_as = old_democracy_leader
			employer = {
				trigger_event = { id = me_syracuse_1_democracy.2 }
			}
		}
		if = {
			limit = { has_variable = me_syr_current_tyrant_flag }
			remove_variable = me_syr_current_tyrant_flag
			save_scope_as = syracuse_old_tyrant
			employer = {
				trigger_event = {
					id = me_syracuse_1_democracy.3
					days = 1
				}
			}
		}
		if = {
			limit = { has_variable = me_syr_foreign_leader_flag }
			remove_variable = me_syr_foreign_leader_flag
			save_scope_as = me_syracuse_old_foreign_request_character_scope
			if = {
				limit = {
					any_country = { has_variable = me_syr_foreign_country_flag }
				}
				random_country = {
					limit = { has_variable = me_syr_foreign_country_flag }
					save_scope_as = me_syracuse_foreign_request_scope
				}
				scope:me_syracuse_foreign_request_scope = {
					trigger_event = { id = me_syracuse_1_democracy.12 }
				}
			}
		}
		if = {
			limit = { 
				has_variable = me_syr_heir_flag
				c:SYR = { has_variable = death_to_tyrants_flag }
				employer = {
					tag = SYR
					OR = {
						var:ongoing_revolutionary_route = 6
						AND = {
							has_completed_mission_task = syracuse_1_6_approach_heir
							NOT = { has_completed_mission_task = syracuse_1_7_assassinate }
						}
					}
				}
			}
			remove_variable = me_syr_heir_flag
			save_scope_as = me_syr_heir_scope
			c:SYR = {
				trigger_event = { id = me_syracuse_1_democracy.73 }
			}
		}
		if = {
			limit = { 
				has_variable = gm_family_head_1_flag
			}
			save_scope_as = gm_old_family_head
			remove_variable = gm_family_head_1_flag
			if = {
				limit = { 
					employer = { has_variable = gm_1_greek_country_flag }
				}
				employer = {
					trigger_event = { id = me_greek_1_black_sea.13 }
				}
			}
		}
		if = {
			limit = { 
				has_variable = gm_family_head_3_flag
			}
			save_scope_as = gm_old_family_head
			remove_variable = gm_family_head_3_flag
			if = {
				limit = { 
					employer = { has_variable = gm_3_greek_country_flag }
				}
				employer = {
					trigger_event = { id = me_greek_3_italiote.26 }
				}
			}
		}
		if = {
			limit = { 
				has_variable = gm_family_head_4_flag
			}
			save_scope_as = gm_old_family_head
			remove_variable = gm_family_head_4_flag
			if = {
				limit = { 
					employer = { has_variable = gm_4_greek_country_flag }
				}
				employer = {
					trigger_event = { id = me_greek_4_west.3 }
				}
			}
		}
		if = {
			limit = { has_variable = archimedes_flag }
			employer = {
				if = {
					limit = { has_country_modifier = archimedes_modifier }
					remove_country_modifier = archimedes_modifier
				}
			}
		}
		if = {
			limit = { 
				OR = {
					AND = {
						this = char:32 
						char:288 = {
							OR = {
								is_alive = no
								NOT = { employer = c:MAC }
							}
						}
					}
					AND = {
						this = char:288
						is_previous_ruler = yes
					}
				}
				char:289 = { 
					is_alive = yes
					employer = c:MAC
				}
				char:290 = { 
					is_alive = yes 
					employer = c:MAC
				}
			}
			c:MAC = {
				trigger_event = {
					id = dhe_macedon.7
					days = { 100 200 }
				}
			}
		}
		if = {
			limit = { this = char:52 }
			c:KIO = {
				trigger_event = { id = dhe_mithridates.9 }
			}
		}
		if = {
			limit = { has_variable = betrothed_flag }
			remove_variable = betrothed_flag
		}
	
	}
	events = {
		olympic.10 #inform patron country of athlete death
		ip_republic.33
	}
	random_events = {
		5 = character_events.1
		75 = 0
	}	
}